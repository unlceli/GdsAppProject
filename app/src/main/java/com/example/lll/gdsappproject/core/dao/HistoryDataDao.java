package com.example.lll.gdsappproject.core.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HISTORY_DATA".
 */
public class HistoryDataDao extends AbstractDao<HistoryData, Long> {


    public static final String TABLENAME = "HISTORY_DATA";

    /**
     * Properties of entity HistoryData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
    }

    public HistoryDataDao(DaoConfig config) {
        super(config);
    }

    public HistoryDataDao(DaoConfig config, AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates this underlying database table/
     *
     * @param db
     * @param isNotExists
     */
    public static void createTable(Database db, boolean isNotExists) {
        String constraint = isNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE" + constraint + "\" HISTORY_DATA\" ("
                + "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"
                + "\"DATE\" INTEGER NOT NULL ,"
                + "\"DATA\" TEST);");
    }

    public static void dropTable(Database db, boolean isExists) {
        String sql = "DROP TABLE " + (isExists ? "IF EXISTS " : "") + "\"HISTORY_DATA\"";
        db.execSQL(sql);
    }




    @Override
    protected HistoryData readEntity(Cursor cursor, int offset) {
        return null;
    }

    @Override
    protected Long readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    protected void readEntity(Cursor cursor, HistoryData entity, int offset) {

    }

    @Override
    protected void bindValues(DatabaseStatement stmt, HistoryData entity) {

    }

    @Override
    protected void bindValues(SQLiteStatement stmt, HistoryData entity) {

    }

    @Override
    protected Long updateKeyAfterInsert(HistoryData entity, long rowId) {
        return null;
    }

    @Override
    protected Long getKey(HistoryData entity) {
        return null;
    }

    @Override
    protected boolean hasKey(HistoryData entity) {
        return false;
    }

    @Override
    protected boolean isEntityUpdateable() {
        return false;
    }
}
